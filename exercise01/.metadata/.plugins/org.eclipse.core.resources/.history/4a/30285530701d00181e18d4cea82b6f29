// ==========================================================================
// $Id$
// ==========================================================================
// (C)opyright: 2009-2010
//
//   Ulm University
// 
// Creator: Hendrik Lensch
// Email:   {hendrik.lensch,johannes.hanika}@uni-ulm.de
// ==========================================================================
// $Log$
// ==========================================================================

#include <stdio.h>
#include <vector_types.h>

#include "PPM.hh"

using namespace std;
using namespace ppm;

#define MAX_THREADS 128 

//-------------------------------------------------------------------------------

// specify the gamma value to be applied
__device__ __constant__ float gpuGamma[1];

__device__ float applyGamma(const float& _src, const float _gamma)
{
	return 255.0f * __powf(_src / 255.0f, _gamma);
}

/* compute gamma correction on the float image _src of resolution dim,
 outputs the gamma corrected image should be stored in_dst[blockIdx.x *
 blockDim.x + threadIdx.x]. Each thread computes on pixel element.
 */__global__ void gammaKernel(float *_dst, const float* _src, int _w)
{
	int x = blockIdx.x * MAX_THREADS + threadIdx.x;
	int y = blockIdx.y;
	int pos = y * _w + x;

	if (x < _w)
	{
		_dst[pos] = applyGamma(_src[pos], gpuGamma[0]);
	}
}

 __global__ void computeDiff(float *img, float * img2, float* outImg, int _w)
 {
 	int x = blockIdx.x * MAX_THREADS + threadIdx.x;
 	int y = blockIdx.y;
 	int pos = y * _w + x;

 	if (x < _w)
 	{
 		outImg[pos] = fabs(img[pos]-img2[pos]);
 	}
 }

//-------------------------------------------------------------------------------

int main(int argc, char* argv[])
{
	int acount = 1; // parse command line

	if (argc < 4)
	{
		printf("usage: %s <img> <img2> <outImg>\n", argv[0]);
		exit(1);
	}

	float* img;
	float* img2;



	int w, h;
	readPPM(argv[acount++], w, h, &img);
	readPPM(argv[acount++], w, h, &img2);

	// flag indicating weather the CPU or the GPU version should be executed
	bool gpuVersion = atoi(argv[acount++]);

	int nPix = w * h;

	float* gpuImg;
	float* gpuImg2;
	float* outImg;

	//-------------------------------------------------------------------------------
	printf("Executing the GPU Version\n");
	// copy the image to the device
	cudaMalloc((void**) &gpuImg, nPix * 3 * sizeof(float));
	cudaMalloc((void**) &gpuImg2, nPix * 3 * sizeof(float));
	cudaMalloc((void**) &outImg, nPix * 3 * sizeof(float));
	cudaMemcpy(gpuImg, img, nPix * 3 * sizeof(float),
			cudaMemcpyHostToDevice);
	cudaMemcpy(gpuImg2, img2, nPix * 3 * sizeof(float),
				cudaMemcpyHostToDevice);

	// copy gamma value to constant device memory
	//cudaMemcpyToSymbol(gpuGamma, &img, sizeof(float));

	// calculate the block dimensions
	dim3 threadBlock(MAX_THREADS);
	// select the number of blocks vertically (*3 because of RGB)
	dim3 blockGrid((w * 3) / MAX_THREADS + 1, h, 1);
	printf("bl/thr: %d  %d %d\n", blockGrid.x, blockGrid.y, threadBlock.x);

	//gammaKernel<<< blockGrid, threadBlock >>>(gpuResImg, gpuImg, w * 3);
	computeDiff<<< blockGrid, threadBlock >>>(img, img2,outImg, w * 3);
	// download result
	cudaMemcpy(img, outImg, nPix * 3 * sizeof(float),
			cudaMemcpyDeviceToHost);

	cudaFree(outImg);
	cudaFree(gpuImg);
	cudaFree(gpuImg2);

	writePPM(argv[acount++], w, h, (float*) img);

	delete[] img;
	delete[] img2;

	printf("  done\n");
}

